- should keywords be a set data structure instead of a list
- I should protect against buffs being given to the wrong minions
- Raw modifying minions at buffs[n] index in my state.board is likely to cause array out of bounds errors and I should check for that (argus is broken as a result)
- Token summon battlecries are broken
- logic in add card should look like:
    1) non token battlecries for a minion
    2) add minion
    3) token battlecries for the minion
    4) see if hooks were triggered
    - this is because if we summon the minion before we do non token battlecries, things like metaltooth leaper will buff themselves
    - also if we do all battlecries at once and don't distinguish between token battlecries and non-token battlecries, if there are 6 minions on board when we play a token battlecry
        that token will get onto the board and prevent the original minion from being played
    - playing the minion must happen before hooks are triggered because floating watcher buffs itself if there is a wrath weaver
- inHand should probably get changed to onboard
- somehow I have to deal with the scenario of playing the following minions from hand (in rafaam's case) currently the api isn't able to pull them up:
    - murloc scout
    - tabbycat
    - curator's amalgam
- implement all the hooks // done except for brann
- figure out exactly what attributes each minion should have
- find a better image for tokens tabbycat and murloc scout
- implement magnetic minions as battlecries
- factor battlecries out of addcard so brann can be implemented as a card with a hook
- deal with golden status improving board affecting battlecries and golden hooks eg tidecaller/brann



{
img: result.battlegrounds.image,
minion_type: result.minionTypeId, // an int representing murloc, beast etc
children: result.childIds, // minions associated with the current minion
// eg alleycat has tabbycat's id in its children array
attack: result.attack,
health: result.health,
name: result.name,
cardid: result.id, // id unique to the minion
text: result.flavorText,
keywords: result.keywordIds, // numbers representing taunt, dshield, etc
inHand: false, // determines whether or not to show play me button on card component
goes: 0, // an indicator of where on the board this minion should go if we add
// it to the board using addCard in store.js
buffs: null, // an array of integers
// these integers are indices in this.$store.board
// indicating where the minion's buffs should go
// for minions that only buff one minion, buffs will contain one elment which
// indicates the minion they buff
// for minions that buff like 3 minions, there will be 3 integers and so on
microbots: 0,
plants: 0,
},